jobs:
- job: build_daint
  pool: CSCS
  strategy:
    matrix:
      pgi_19_9_gpu:
        compiler_module: PGI/19.9
        PrgEnv: PrgEnv-pgi
        accel_module: cudatoolkit
        FCFLAGS: "-O3 -ta=tesla:cc60,cuda10.1 -Mallocatable=03 -gopt -Minline,reshape,maxsize:40"
        RTE_KERNELS: openacc
      pgi_default_gpu:
        compiler_module: pgi
        PrgEnv: PrgEnv-pgi
        accel_module: craype-accel-nvidia60
        # Generic accelerator flag
        FCFLAGS: "-O3 -acc                   -Mallocatable=03 -gopt"
        RTE_KERNELS: openacc
      pgi_19_10_cpu:
        compiler_module: PGI/19.10
        PrgEnv: PrgEnv-pgi
        accel_module:
        # Error checking flags
        FCFLAGS: "-Mallocatable=03 -Mstandard -Mbounds -Mchkptr -Kieee -Mchkstk"
        RUN_CMD:
      pgi_19_9_cpu:
        compiler_module: PGI/19.9
        PrgEnv: PrgEnv-pgi
        accel_module:
        # Error checking flags
        FCFLAGS: "-Mallocatable=03 -Mstandard -Mbounds -Mchkptr -Kieee -Mchkstk"
        RUN_CMD:
      pgi_default_cpu:
        compiler_module: pgi
        PrgEnv: PrgEnv-pgi
        accel_module:
        # Error checking flags
        FCFLAGS: "-Mallocatable=03 -Mstandard -Mbounds -Mchkptr -Kieee -Mchkstk"
    maxParallel: 2

  workspace:
    clean: all

  steps:
  - script: |
      set -e

      echo "
      export PATH=$CRAY_BINUTILS_BIN:$PATH
      module load daint-gpu
      module swap PrgEnv-cray $(PrgEnv)
      module load cray-netcdf cray-hdf5
      module swap pgi $(compiler_module)
      module load $(accel_module)
      module load cray-python/3.6.5.7
      export LD_LIBRARY_PATH=$CRAY_LD_LIBRARY_PATH:$LD_LIBRARY_PATH

      # The following adds a virtual environment with all Python modules
      # that are required for the test suite. The environment has been
      # created as follows:
      #     module load cray-python/3.6.5.7
      #     python -m venv python-rte-rrtmgp
      #     python-rte-rrtmgp/bin/pip install --upgrade pip
      #     python-rte-rrtmgp/bin/pop install netCDF4
      #     python-rte-rrtmgp/bin/pop install xarray
      #     python-rte-rrtmgp/bin/pop install dask
      #     python-rte-rrtmgp/bin/pop install toolz
      #
      export PATH=\"/scratch/snx3000/skosukhi/python-rte-rrtmgp/bin:\$PATH\"
      export FC=ftn
      export LAUNCH_PREFIX='srun -C gpu -A c15 -p cscsci'

      echo Environment:
      module list
      " > modules

    displayName: 'Create module environment'
  - script: |
      set -e
      source modules
      config_args='--enable-tests --disable-silent-rules'
      if test -n "$RTE_KERNELS"; then
        config_args="$config_args --enable-openacc"
      else
        openacc_arg="$config_args --disable-openacc"
      fi
      ./configure $config_args || { cat ./config.log; false; }
    displayName: 'Configure'
  - script: |
      set -e
      source modules
      make -j8
    displayName: 'Make'
  - script: |
      set -e
      source modules
      make -j8 check
    displayName: 'Check'
