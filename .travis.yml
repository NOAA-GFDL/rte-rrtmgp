sudo: required
dist: xenial
language: cpp
matrix:
  include:
  - name: "PGI community edition "
    compiler: gcc
    env:
    - FC=pgfortran
    - FCFLAGS="-Mallocatable=03 -Mstandard -Mbounds -Mchkptr -Kieee -Mchkstk"
    - TEST_PGI=yes
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
        packages:
          - gcc-8
          - gfortran-8
          - libnetcdf-dev
  - name: "gcc-9"
    compiler: gcc
    env:
    - FC=gfortran-9
    - FCFLAGS="-ffree-line-length-none -m64 -std=f2008 -march=native -fbounds-check -finit-real=nan"
    - TEST_PGI=no
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
        packages:
          - gcc-9
          - gfortran-9
          - libnetcdf-dev
  - name: "gcc-8"
    compiler: gcc
    env:
    - FC=gfortran-8
    - FCFLAGS="-ffree-line-length-none -m64 -std=f2008 -march=native -fbounds-check -finit-real=nan"
    - TEST_PGI=no
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
        packages:
          - gcc-8
          - gfortran-8
          - libnetcdf-dev
install:
# Install PGI Community edition if not present in cache
- if [[ "${TEST_PGI}" == "yes" ]]; then
    wget -q 'https://raw.githubusercontent.com/nemequ/pgi-travis/master/install-pgi.sh';
    chmod +x install-pgi.sh;
    ./install-pgi.sh --nvidia;
    pgfortran --version;
    echo "switch -pthread is" > .userrc;
    echo "append(LDLIB1=-lpthread);" >> .userrc;
  fi

# Install netcdf-fortran (with default FCFLAGS)
- git clone https://github.com/Unidata/netcdf-fortran.git --branch v4.4.4;
  cd netcdf-fortran;
  (unset FCFLAGS;
   ./configure FC=$FC --prefix=${HOME}/netcdff && make && make install) || exit 1;
  cd ..

# Install CONDA
- wget http://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
  chmod +x miniconda.sh;
  ./miniconda.sh -b;
  export PATH=/home/travis/miniconda3/bin:$PATH;
  conda update --yes conda;
  conda create --yes -n test python=3.7;
  source activate test;
  conda install --yes urllib3 netcdf4 xarray dask scipy

script:
#
# Default kernels (also check in-source build)
#
- ./configure --prefix=${HOME}/rte-rrtmgp --enable-tests --disable-openacc
    --disable-silent-rules --with-netcdf-fortran=${HOME}/netcdff || { cat ./config.log; exit 1; }
- make && make check && make install && make distclean
#
# Open-acc kernels (also check out-of-source build)
#
# PGI: we can simply enable OpenACC support.
# GCC: both compilers support OpenACC 2.0 but we need OpenACC 2.6. Therefore,
#      the compilation will fail because the configure script will automatically
#      append '-fopenacc' to FCFLAGS. However, we still want to check OpenACC
#      kernels but compile them without OpenACC support. A way to do that is to
#      prevent the configure script from appending the flag by calling it with
#      an additional argument 'acx_cv_fc_openacc_flag='.
#
- mkdir ./test_build && cd ./test_build
- openacc_flag_arg=;
  test x"$TEST_PGI" = xyes || openacc_flag_arg='acx_cv_fc_openacc_flag=';
  echo "openacc_flag_arg='${openacc_flag_arg}'"
- ../configure --prefix=${HOME}/rte-rrtmgp-openacc --enable-tests --enable-openacc ${openacc_flag_arg}
    --disable-silent-rules --with-netcdf-fortran=${HOME}/netcdff || { cat ./config.log; exit 1; }
- make && make check && make install && make distclean
notifications:
  email:
    on_success: never
    on_failure: never
